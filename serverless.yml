org: maxkoval
app: serverless-linkshortener
service: serverless-linkshortener
frameworkVersion: '3'
useDotenv: true

plugins:
  - serverless-esbuild
  - serverless-offline

custom:
  esbuild:
    minify: true
    watch:
      pattern: ['./index.ts', 'src/**/*.ts']
      ignore: ['.serverless/**/*', '.build']
  usersTableName: usersTable

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: eu-central-1
  httpApi:
    cors: true
    authorizers:
      jwt-auth:
        type: request
        functionName: authorizerFunc
  environment:
    USERS_TABLE: ${self:custom.usersTableName}
    JWT_ACCESS_SECRET: ${env:JWT_ACCESS_SECRET}
    JWT_REFRESH_SECRET: ${env:JWT_REFRESH_SECRET}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource: "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.usersTableName}*"

functions:
  authorizerFunc:
    handler: apps/auth/authorizer.isAuthenticated

  hello:
    handler: apps/auth/handler.hello
    events:
      - httpApi:
          path: /hello
          method: GET
          authorizer:
            name: jwt-auth

  authSignUp:
    handler: apps/auth/handler.signUp
    events:
      - httpApi:
          path: /auth/sign-up
          method: POST

  authSignIn:
    handler: apps/auth/handler.signIn
    events:
      - httpApi:
          path: /auth/sign-in
          method: POST

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1


