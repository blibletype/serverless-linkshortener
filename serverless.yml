org: maxkoval
app: serverless-linkshortener
service: serverless-linkshortener
frameworkVersion: '3'
useDotenv: true

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-lift

custom:
  esbuild:
    minify: true
    watch:
      pattern: ['./index.ts', 'src/**/*.ts']
      ignore: ['.serverless/**/*', '.build']
  usersTableName: usersTable
  linksTableName: linksTable
  linksIdLength: 6
  senderEmailAddress: maxymkoval2510@gmail.com

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: eu-central-1

  httpApi:
    cors: true
    authorizers:
      jwt-auth:
        type: request
        functionName: authorizerFunc

  environment:
    QUEUE_URL: ${construct:jobs.queueUrl}
    USERS_TABLE: ${self:custom.usersTableName}
    LINKS_TABLE: ${self:custom.linksTableName}
    JWT_ACCESS_SECRET: ${env:JWT_ACCESS_SECRET}
    JWT_REFRESH_SECRET: ${env:JWT_REFRESH_SECRET}
    LINK_ID_LENGTH: ${self:custom.linksIdLength}
    SENDER_EMAIL_ADDRESS: ${self:custom.senderEmailAddress}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
            - ses:SendEmail
          Resource:
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.usersTableName}*"
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.linksTableName}*"
            - "arn:aws:ses:${aws:region}:${aws:accountId}:identity/${self:custom.senderEmailAddress}*"
            - "arn:aws:ses:${aws:region}:${aws:accountId}:configuration-set/my-first-configuration-set"

constructs:
  jobs:
    type: queue
    worker:
      handler: apps/notify/worker.sendEmail

functions:
  authorizerFunc:
    handler: apps/auth/authorizer.isAuthenticated

  authSignUp:
    handler: apps/auth/handler.signUp
    events:
      - httpApi:
          path: /auth/sign-up
          method: POST

  authSignIn:
    handler: apps/auth/handler.signIn
    events:
      - httpApi:
          path: /auth/sign-in
          method: POST

  createLink:
    handler: apps/links/handler.create
    events:
      - httpApi:
          path: /links
          method: POST
          authorizer:
            name: jwt-auth

  deactivateLink:
    handler: apps/links/handler.deactivate
    events:
      - httpApi:
          path: /links/{linkId}
          method: DELETE
          authorizer:
            name: jwt-auth

  deactivateExpired:
    handler: apps/links/handler.removeExpiredLinks
    events:
      - eventBridge:
          schedule: rate(3 minutes)

  listLink:
    handler: apps/links/handler.list
    events:
      - httpApi:
          path: /links
          method: GET
          authorizer:
            name: jwt-auth

  redirect:
    handler: apps/links/handler.redirect
    events:
      - httpApi:
          path: /{linkId}
          method: GET

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

    linksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.linksTableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH


