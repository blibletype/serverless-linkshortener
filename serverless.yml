service: serverless-linkshortener
frameworkVersion: '3'
useDotenv: true

package:
  individually: true

plugins:
  - serverless-dotenv-plugin
  - serverless-esbuild
  - serverless-create-global-dynamodb-table
  - serverless-auto-swagger
  - serverless-lift

custom:
  esbuild:
    minify: true

  globalTables:
    version: v2
    regions:
      - eu-west-1
    createStack: false

  autoswagger:
    apiType: httpApi
    apiKeyHeaders: ['Authorization']

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: ${opt:region}

  httpApi:
    cors: true
    authorizers:
      jwt-auth:
        type: request
        functionName: authorizer

  environment:
    QUEUE_URL: ${construct:jobs.queueUrl}
    BASE_URL: !Sub "https://${HttpApi}.execute-api.${aws:region}.amazonaws.com/"
    DEACTIVATE_EXPIRED_LAMBDA_ARN: arn:aws:lambda:${aws:region}:${aws:accountId}:function:${self:service}-${self:provider.stage}-deactivateExpired
    ROLE_ARN: !GetAtt myDefaultRole.Arn

  iam:
    role: myDefaultRole

constructs:
  jobs:
    type: queue
    batchSize: 10
    worker:
      handler: src/notify/worker.sendEmail

functions:
  - ${file(./auth-functions.yml)}
  - ${file(./links-functions.yml)}

resources:
  Resources:
    myDefaultRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: sls-iam-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - scheduler.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: myPolicyName
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:*
                    - ses:*
                    - sqs:*
                    - scheduler:CreateSchedule
                    - iam:PassRole
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - lambda:InvokeFunction
                  Resource:
                    - "*"

    usersTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Condition: RegionEuCentral1
      Properties:
        TableName: ${env:USERS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

    linksTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Condition: RegionEuCentral1
      Properties:
        TableName: ${env:LINKS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

  Conditions:
    RegionEuCentral1: !Equals [ !Ref "AWS::Region", eu-central-1 ]


